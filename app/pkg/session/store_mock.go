// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package session -source=interfaces.go -destination=store_mock.go
//

// Package session is a generated GoMock package.
package session

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
	isgomock struct{}
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore.
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance.
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockSessionStore) Destroy(ctx context.Context, sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSessionStoreMockRecorder) Destroy(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSessionStore)(nil).Destroy), ctx, sessionId)
}

// GC mocks base method.
func (m *MockSessionStore) GC(ctx context.Context, absoluteExpiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", ctx, absoluteExpiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// GC indicates an expected call of GC.
func (mr *MockSessionStoreMockRecorder) GC(ctx, absoluteExpiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockSessionStore)(nil).GC), ctx, absoluteExpiration)
}

// ReadBySessionId mocks base method.
func (m *MockSessionStore) ReadBySessionId(ctx context.Context, sessionId string) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBySessionId", ctx, sessionId)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBySessionId indicates an expected call of ReadBySessionId.
func (mr *MockSessionStoreMockRecorder) ReadBySessionId(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBySessionId", reflect.TypeOf((*MockSessionStore)(nil).ReadBySessionId), ctx, sessionId)
}

// ReadByUserId mocks base method.
func (m *MockSessionStore) ReadByUserId(ctx context.Context, userId string) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserId", ctx, userId)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserId indicates an expected call of ReadByUserId.
func (mr *MockSessionStoreMockRecorder) ReadByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserId", reflect.TypeOf((*MockSessionStore)(nil).ReadByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockSessionStore) Update(ctx context.Context, session *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionStoreMockRecorder) Update(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionStore)(nil).Update), ctx, session)
}

// Write mocks base method.
func (m *MockSessionStore) Write(ctx context.Context, session *Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSessionStoreMockRecorder) Write(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSessionStore)(nil).Write), ctx, session)
}
